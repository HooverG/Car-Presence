substitutions:
  name: car-presence-workshop
  friendly_name: "Car Presence Workshop"
  board: 

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

esp8266:
  board: ${board}

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${friendly_name} Fallback AP
    password: !secret car_presence_workshop_ap_password

captive_portal:
  
logger:

api:
  encryption:
    key: !secret car_presence_workshop_api_encryption_key

ota:
  - platform: esphome
    password: !secret car_presence_workshop_ota_password

text_sensor:
  - platform: version
    name: ESPHome Version - ${friendly_name}

  - platform: wifi_info
    ip_address: 
      name: IP - ${friendly_name}
    mac_addres:
      name: MAC - ${friendly_name}

# Ultrasonic Sensor Configuration
sensor:
  - platform: ultrasonic
    trigger_pin: D1
    echo_pin: D2
    name: "Ultrasonic Distance"
    update_interval: 10s
    id: ultrasonic_sensor

binary_sensor:
  - platform: template
    name: "Car Presence"
    id: car_presence
    device_class: occupancy
    lambda: |-
      if (id(distance_in_range).state) {
        return true;
      } else {
        return false;
      }

# Interval filter to check for a range condition lasting more than 2 minutes
interval:
  - interval: 10s
    then:
      - lambda: |-
          static int check_counter = 0;
          float dist = id(ultrasonic_sensor).state;
          if (dist >= a && dist <= b) {
            check_counter++;
          } else {
            check_counter = 0;
          }

          if (check_counter >= 12) {
            id(distance_in_range).publish_state(true);
          } else {
            id(distance_in_range).publish_state(false);
          }

# Define a template sensor to track if the distance is in range
binary_sensor:
  - platform: template
    name: "Distance In Range"
    id: distance_in_range
    internal: true
    lambda: |-
      return false;  # Default state is false
